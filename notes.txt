-seamless transition between singleplayer and multiplayer experience; continuous scaling of playerbase size
	-playable areas increase/decrease by available players
-fake players: pseudo-turing-complete ai through limited game scope
-incremental with data vis
-persistent playermade structures, machines, etc
	-everything is an input/output machine
	-players output can become other players' input
	-builds into a massive network
	-players can log in at any time to see progress, collect output, whatever
-chess/stratego type game
-open world td
-scaling network performance (like eve online)


open world 2d rust
casual arcade-y platform brawler
-suuuper simple fast-paced mechanics
br rpg
- key: min-maxing stats by farming until endgame, balanced with PVP

Open world TD
- Core Features
	- procedurally generated world
	- specified sites where new players can start
	- your base generates creeps
	- can upgrade creeps to different types, levels, etc
	- big emphasis on routing creeps
		- switchable gates
		- pressure plates, redstone-like circuits
	- wave manipulation (building up big bursts to send at enemies/objectives)
	- neutral monster spawns for gold
	- neutral minibosses
	- pre-built pathways
		- editing lanes? (game design decision)
	- boss spawns?
	- more strongholds unlock as players go online
		- do they also shrink later? or stay open based on historical peak
- Added depth post-MVP
	- really compelling notification integration
		- mobile push, email, sms
		- configurable emergency notifications
		- daily/weekly digest/summary/customized newsletter
		- stats and graphs and numbers
	- action replay of important events while you were gone (?)
	- global map (show player/origin point levels, color coded numbers)
- Gameplay
	- Strongholds
		- Source of spawning creeps
		- Leveled up with gold
		- Level of stronghold -> level of creeps produced
		- Level also -> stronghold HP
		- Damaged by enemy creeps (health regen in mean time) -> neutral "contested state" (no regen) -> back to level 1
		- Can be upgraded to spec into special types of creeps
			- Combinations of several strongholds need to converge into a wave of creeps
		- Give build permission over a (fixed?) radius
		- When stronghold dies, all allied structures die (not creeps?)
			- Cool explody animation and victory (or defeat) music
	- Tower slots
		- Pre-generated in world
		- Towers level up??
		- Specced with gold upgrades, just like strongholds
	- Gold
		- Gained (almost exclusively) by killing enemy creeps
		- Global, not tied to any stronghold
		- Lost if all strongholds are lost
	- Lanes
		- All lanes are pre-generated (??)
		- All bidirectional
		- No branching????
		- Control structures (built? pregenerated?) operated by stronghold owner
		- Enemy creeps also follow control structures?
	- Creeps
		- No collision with other creeps or towers, only strongholds and lane control structures
	- Spawning (New Game)
		- Need to spawn far enough for high level strongholds but close enough to interact
- Brainstorming
	- AoE buff shrines (destructible by creeps)
	- Resource over time structures?
		- Consume a tower slot
	- Build up a garrison of reserve troops (completely fill a lane) blocked off by a gate. Pressure plate (activated by enemy units) opens the reserve gate
		- Same strategy used to build large waves automatically and deploy them towards enemies
	- Events (neutral creep invasions, minibosses, etc)
	- Customization on a pixel-art level (within stronghold boundaries)
		- A maxed out stronghold, zoomed out on the map, looks like a circle with cool designs in it
	- Dev imposed acts of god to destroy rude pixel art 
- Engine
	- Discrete fixed tick-rate and positional grid
		- Any creep speed variation?
		- Client-side interpolation of position
	- Host machine specs must be able to handle 100% grid saturation
- Philosophy
	- Randomness
		- Enough RNG to force every stronghold to be designed according to the environment
		- BUT still enough options to allow complex tactics and mechanisms (wave building, reserves, etc)
	- Persistence
	- Flux
		- Will usually last overnight, but requires constant attention to remain stable (both due to neutral and enemy forces)
- Questions
	- what can creeps hit? other creeps? towers? specific power source?
	- what gives gold? only killing other creeps (neutral/pvp)?
	- what happens if two people are attacking the same objective? (miniboss/creep spawn)
		- 'contest' state like a neutral control point in an fps?
	- what limits creep mobility (why don't they go in a directoin forever)
		- passive DoT
		- DoT from hazards along the path
		- no limit
	- what do creeps do at unmarked intersections?
		- random per creep
		- random deterministic
		- no such intersections
		- player directed
	- can you route/manipulate neutral creeps?
	- what is the auxiliary dimension of the game?
		- resource gathering? (mining, farming, etc. civ-style)
		- aesthetics; customizing the area you control
	- should towers level-up on their own? be manually upgraded? both?
	- creeps buffing/supporting other creeps? (healers, tanks, etc)
		- Maybe avoid since everything should be automated, and is practically just a numbers game
		- Tactics should be more about routing then wave composition (?????)
	- spawning in waves or continuous?
		- I really like the idea of manual wave creation/manipulation
	- how to enemies interact with friendly lane control structures? (gates, barricades)
		- ignore completely, no collision
		- damage + destroy
	- if lane control structures must be build, where can they be built?
	- where can towers be built? is there a no-mans-land between player strongholds?
		- dynamic lane interactions within nomans land? buff gates and stuff?
	- same slots for towers and spawners?
		- Forces a choice between offense + defense (unless there is creep-v-creep combat)
	- should stronghold radius increase by level??
		- Probably not, complicates things like Civ city-growth where radii intersect
			- Solve by enforcing a max radius...
	- Need ability to clear a clogged lane/ delete all creeps in lane?
	- XP/level unlocks upgrades, which must be bought?
		- both xp and gp gate upgrades, or just gp?
		- only GP gates upgrades, and XP gates level
	- What prevents snowball? what protects noobs?
	- Any kind of cooperative interaction?
		- In a way, all conflict benefits both parties since it is the primary source of gold in the game
		- Stable configurations of creep-farming could be super-beneficial
		- In fact, destroying an enemy in such a configuration may result in *less* income overall
		- buuuut taking strongholds = growth (potentially exponential vs linear)
	- How to ensure power levels don't shift too drastically overnight
		- If a big wave is building up, you see it happening
		- You have to log in to spend
		- Strongholds resetting to level 1 protects defenders from offense snowball
		- What protects offense from defensive snowball? (stronghold defeated, reset to level 1, immediately smashed by the lvl 30 creeps from next door)
		- Some mechanic needs to enforce a cooldown period of almost ~24hrs before consecutive strongholds can fall???????
	- What's the point of a stronghold landlocked by all friendly strongholds?
		- Creeps can't even get out to enemy bases...
		- Solve this with factory/resource mining structures?
			- Build an empire with evolving military on the outsides and evolving economy on the inside
			- If this route is taken, should military or economy be the main generator of cash?
			- XP generated by military (towers killing creeeps), GP generated by economy (passive/vulernable resource structures), growth generated by military (offensive creeps)
- Post-MVP/blue sky
	- scalability/sharding?
	- monetization
		-freemium
		-microtransactions
			-creep skins, tower skins, banners
		-buy once? (doesn't seem to fit)
	- Name?

4/3

2 hrs dev (procgen)

procgen algo:
- init: randomly place an origin base
- repeat: randomly select a base to branch from
- random walk (with probabilistic turns + length) to next base
	- do not collide with other lanes, towers, bases, edges (if you do, discard entire lane and start over)
	- check that base is not within radius of other bases (check all for euclidian distance)
	- once lane is validated, add random towers adjacent to lane (within radius of each tower)
- stop when target towers achieved (or after a certain failure rate?)

longer term roadmap:
- procgen a map with bases, lanes, towers
- render to canvas with pan+zoom
- creep spawn and movement
- towershots
- base damage
- tower, creep, base UI
- levelling
...
- network code

fuck man i dont know what to do

4/4
~1.5 hr procgen
1hr refactoring for browser (@ home)

4/5
creep knows:
-what lane they're on (lane id int)
-which lane tile id they're on (array index int)
-what tile they're on (position x and y) ...implied by above
-what base they belong to (implied by lane?)
-what direction they're going (forward or backwards according to lane tile list) (implied by above?)

lane knows:
-what base they start from
-what base they go to

base knows:
-what lanes they have

update (one game tick)
- bases spawn creeps on every lane (given cooldown)
- creeps move along lane
- creeps hit and dmg other base

Game > Map > bases + towers + lanes > tiles

2hrs wasted being braindead about oo hierarchies
just hack the thing together
everything static in a global array with an id (array index)
all connections by passing around the ids

classes (e.g. Creep) vs plain objects
- it's not like I am actually enforcing any kind of interface, this isn't typescript
- when I'm passing an options object in the cunstructor it's virtually the same thing anyways...
- maybe it's sliiiightly better than not (manage construction logic in a real constructor)
- getters and setters? chained methods?

static things: downloaded once from server (can even be served via http?)
- lanes
- bases
- towers
- etc

dynamic things: constantly changing
- tower attack CD
- creep health
- base health
- base state/ownership
- creep position
- towerslot empty or filled

use an event system!
- event: [CREEP_SPAWNED]
- event: [TOWER_BUILT]
- event: [TOWER_UPGRADED]

in fact, 95% of everything is deterministic. the client knows when creeps should spawn as long as it stays in sync with the server

the idea is to use the same event model to drive both networking and presentation

this is an optimization, right?
the real tricky bit is that the renderer needs to interpolate between game updates, without replicating too much game logic
maybe there are simpler solutions to this problem
possible solutions:
- lock renderer to same game update rate
- renderer lags behind game update by 1 tick
- renderer predicts next update and interpolates (???)

how do you do creep movement?
how do you do tower attacks?

keyword: Deterministic Lockstep
see also: Snapshot interpolation

4/6 0.5hr refactor/supporting code for creep movement

=======
4/8: 1 hr struggling fruitlessly at home

Why is the git repo not pushing???

4/9: 

PIXI.js for rendering
Lance.gg for networking

1hr proper PIXI integration at home

4/10:
Either Browserify + Grunt + manually export to window
-OR-
conditional require <-- let's do this.

1hr refactor away from Browserify (native nodejs/browser interop)
0.5hr tower attack
0.5hr creep object pooling

Render TODO: 
- tower attack
- minion hp
- pan + zoom
- clean minimalist graphics + color scheme
- base detail UI, incl. radius
- tower detail UI, incl. radius

Engine TODO:
X different teams/players/owners
X base dmg
- base health regen
X don't spawn creeps on lanes between friendly bases

Meta TODO:
- refactor Render to a module?
- refactor "Map" -> "Game" or "OWTD"?
- refactor classes like Base, Lane, Creep???
	- Duck typing everwhere with constructor methods?
- separate file for config.js?
	- Defaults overridable by Map() constructor?
- config subobjects (creep_base_health -> creep.base_health)

are bases ai-controlled before a new player spawns on them?
do ai bases level up? are they locked to a specific level
what stops a DoS attack where a guy opens 100 browser tabs and spawns 100 bases

0.5hr owners, base capture

4/11

how will levelling up work?
- TOWERS UPGRADE:
	- attack radius
	- damage
- UNITS UPGRADE:
	- spawn rate
	- health
	- damage
- also towers need to be built in the first place of course
- killing enemy creeps generates cash
	- higher level = more cash?? or nah. maybe nah for now
- cash is shared between all bases
- server needs to keep track (in memory) of all players, their cash, their username, their preferred color
- if you lose (all bases captured) you lose all your money and you spawn again with 0
- option to FF and restart
- all bases are AI controlled when not owned by players (?)
	- permanently level 1? permanently mid-level?
- will there be a snowball effect of capturing a whole series of AI bases? why not?
	- upgrade price balancing
	- offensive upgrades cost >> defensive upgrade cost
- bases show an "upgrade level" (= number of base upgrades purchased)
	- Renders on the base icon

Graphicsss
- Lanes are color coded
	- Grey = contested (between enemy bases)
	- Colored = safe (between friendly bases)
- Bases match player color
- Empty tower slots are empty circles (grey, or less-saturated primary)
- What should built towers look like?
	- must have an apparent direction (rotating to focus creeps)
	- but still minimialist
- Bases are just solid primary-colored big circles with the level inscribed
- How to do health bars? (creeps and bases)
	- Discrete health bubbles, not continuous bar
	- Pie slices?
		- Minions probably too small for this
	- Diminishing concentric circles

REFACTOR TODO:
- config -> config.js
- class Map -> Game {}

idea: base health is always bought ???
- abuse potential

initial upgrades to be implemented: tower dmg, tower radius, minion hp, minion spawn rate

TODO:
- buy each type of upgrade
- buy upgrade > 1 tier above (prevent?)

1hr upgrade implementation

ENGINE TODO:
- Tower purchase
- Base capture destroy all tower?

VIEW TODO:
- pan and zoom map
- zoom levels
- Proper graphics
- Team colors
- Overlay panel
	- Creep
	- Base
	- Tower
- Clear panel on click again
- Sync overlay panel with model
- line connecting screen space (overlay) to world space (game object), taking into account transform matrix from pan & zoom

NETWORK TODO:
- Everything.

4/12:

temptation to do networking from scratch

Full creep update: 
{
	this.id = options.id;
	this.base = options.base;
	this.lane = options.lane;
	this.lane_index = options.lane_index;
	this.direction = options.direction;
	this.health = options.health;
	this.x = options.x;
	this.y = options.y;
	this.dead = false;
}

Delta creep update:
{
	this.lane_index = options.lane_index;
	this.health = options.health;
}

creep 0 lane_index 1 health 1

<creeps> <number of creeps> <creep id> <fields modified> <field> <value> ...
creeps 1 0 lane_index 3 health 4
0 1 0 0 3 4 3
just write your own serializer bro
just do it its easy
its just binary bro
think how efficient it would be
so elegant and optimized
mmmm
what, do you want to hack your beatiful bespoke data structures into lance.gg or json_patch or something?
gross.
dont let them get contaminated with that filth
model it like a VCS?
every tick creates a delta (with a tick timestamp)
clients send ACKs of which server tick they are up to date with?
Collections which are synchronized
is there a way to do this abstractly, with reflection?

Rules:
- Collections are object-pooled (semi-immutable -- collections only grow, items shouldnt be removed per-se)
- Must call some form of serializer.register(Class)

2hr research and plan standalone javascript object delta networking lib (just for fun)